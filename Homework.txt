数据结构任务8
1.
/**
 * 子任务名：有一整形数组，设计算法实现：所有奇数均在偶数前面
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/11/26
 */
int* sort(int* arr, int len) {
    int temp;
    int i = 0, j = len - 1;

    while (i <= j) {
        while (arr[i] % 2 == 1) i++;
        while (arr[j] % 2 == 0) j--;
        if (i < j) {
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    return arr;
}
2.

平均查找长度为 1/8 * (1 + 2 * 2 + 3 * 2 + 4 * 2 + 5) = 3
3.
第一趟排序结果未变，第二趟 10 被插入到最前面，第三趟 8 被插入到最前面
使用的排序方式明显是插入排序。
第4趟结果{8,9,10,16,59,20,63,71}
第5趟结果{8,9,10,16,20,59,63,71}



数据结构任务7
1.
/**
 * 子任务名：设计邻接表存储结构，基于该结构判断无向图是否连通
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/11/22
 */
#define MAX_VERTEX_NUM 20
typedef struct ArcNode {
    int adjvex;                 // 该弧所指向的顶点的位置
    struct ArcNode* nextarc;    // 指向下一条弧的指针
    int* info;                  // 该弧相关信息的指针
} ArcNode;

typedef struct VNode {
    int data;                   // 顶点信息
    ArcNode* firstedge;         // 指向第一条依附该顶点的弧的指针
} VNode, AdjList[MAX_VERTEX_NUM];

typedef struct {
    AdjList vertices;
    int vexnum, arcnum;         // 图当前顶点数和弧数
    int kind;                   // 图的种类标志
} ALGraph;

/* DFS递归 */
int judgeDFSCount = 0;
void DFS(ALGraph AL, int visited[], int i) {
    visited[i] = 1;
    judgeDFSCount++;
    ArcNode* p = AL.vertices[i].firstedge;
    while (p) {
        if (!visited[p->adjvex])
            DFS(AL, visited, p->adjvex);
        p = p->nextarc;
    }
}

/* DFS 判断 */
int DFSGtaph(ALGraph AL) {
    int* visited = (int*)malloc(sizeof(AL.vexnum));
    int flag = 0;
    DFS(AL, visited, 0);
    if (judgeDFSCount == AL.vexnum) {
        flag = 1;
    }
    return 1;
}

数据结构任务5
1.
/**
 * 子任务名：写出二叉树的二叉链表存储结构，统计二叉树中结点个数
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */
typedef struct BiTNode {
    int data;
    struct BiTNode *lchild, *rchild;
} BiTNode, *BTree;

int NodeCount(BTree T) {
    if (NULL == T)
        return 0;
    else
        return NodeCount(T->lchild) + NodeCount(T->rchild) + 1;
}
2.
/**
 * 子任务名：写出树的带双亲的孩子链表法存储结构，计算树的度
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */
#define MAX_TREE_SIZE 100
typedef struct CTNode {
    int child;
    struct CTNode *next;
} *ChildPtr;
typedef struct {
    int data;
    int parent;
    ChildPtr firstChild;
} CTBox;
typedef struct {
    CTBox nodes[MAX_TREE_SIZE];
    int r, n;
} CTree;

int TreeDegree(CTree T)
{
    if (0 == T.n)
        return 0;
    int flag = 0;
    int n = 0;
    for (int i = 0; i < T.n; i++) {
        while (T.nodes[i].firstChild) {
            T.nodes[i].firstChild = T.nodes[i].firstChild->next;
            flag++;
        }
        if (n < flag)
            n = flag;
    }
    return n;
}
3.
/**
 * 子任务名：写出树的带双亲的孩子链表法存储结构，计算树的度
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */



数据结构任务4
1.
/**
 * 子任务名：编写串赋值函数
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */
int StrAssign(SString T, char *chars)
{
    if (strlen(chars) > MAXSTRLEN) {
        fprintf(stderr, "Error\n");
        return -1;
    }
    T[0] = strlen(chars);
    for (int i = 0; i < T[0]; i++)
        T[i + 1] = chars[i];
    return 1;
}
2.
/**
 * 子任务名：判断i，j下标所对应的数据是否为非零元
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */
int Judge(TSMatrix  T, int i, int j)
{
    if (i <= 0 || j <= 0 || i > T.mu || j > T.nu) {
        fprintf(stderr, "Error\n");
        return -1;
    }
    if (T.tu) {
        for (int k = 1; k <= T.tu; k++) {
            if (T.data[k].i == i && T.data[k].j == j) {
                    printf("是非零元\n");
                    return 0;
            }
        }
    }
    printf("不是非零元\n");
    return 0;
}
3.1)
/**
 * 子任务名：设计该广义表的扩展线性链表（孩子兄弟链表）的存储结构；
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/15
 */
typedef struct GLNode {
    ELemTag tag;                    // 公共部分，用于区分原子节点和表结点
    union {                         // 原子节点和表结点的联合部分
        char atom;                  // 原子节点的值域
        struct GLNode *hp;          // 表结点的表头指针
    };
    struct GLNode *tp;              // 相当于线性链表的 next,指向下一个元素结点
} *Glist;                           // 广义表类型 GList 是一种拓展的线性链表
2)



数据结构任务3
1.
/**
 * 子任务名：设计入栈、出栈及栈中元素个数3个函数
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/01
 */
/* 初始化栈 */
S *initStack(S *s)
{
    s = (S *)malloc(sizeof(S));
    if (!s)
    {
        fprintf(stderr, "OVERFLOW\n");
        exit(EXIT_FAILURE);
    }
    s->top = 50;
    return s;
}
/* 入栈 */
void push(S *s, char e)
{
    if (s->top == 0)
    {
        fprintf(stderr, "The Stack is full\n");
        exit(EXIT_FAILURE);
    }
    s->top--;
    s->arr[s->top] = e;
}
/* 出栈 */
void pop(S *s, char e)
{
    if (s->top == 50)
    {
        fprintf(stderr, "The Stack is null\n");
        exit(EXIT_FAILURE);
    }
    e = s->arr[s->top++];
}
/* 栈中元素个数 */
int lenStack(S *s)
{
    int len = 0;
    while (s->top != 50)
    {
        len++;
        s->top++;
    }
    return len;
}
2.
/**
 * 子任务名：编写入队和出队的算法
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/01
 */
/* 入队 */
void enQueue(Q *q, int e)
{
    if (q->rear == q->front && q->count == 1)
    {
        fprintf(stderr, "The queue is full\n");
        exit(EXIT_FAILURE);
    }
    q->data[q->rear] = e;              // 插入队尾
    q->rear = (q->rear + 1) % MAXSIZE; // 尾部指针后移，如果到最后则转到头部
    if (q->rear == q->front)
        q->count = 1;
}
/* 出队 */
void deQueue(Q *q, int *e)
{
    if (q->front == q->rear && q->count == 0)
    {
        fprintf(stderr, "The queue is null\n");
        exit(EXIT_FAILURE);
    }
    *e = q->data[q->front];              // 返回队头元素
    q->front = (q->front + 1) % MAXSIZE; // 队头指针后移，如到最后转到头部
    if (q->front == q->rear)
        q->count = 0;
}
3.
/**
 * 子任务名：完成下面3个函数
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/10/01
 */
/* 队尾插入元素 */
void EnQ(LQ *q, char x)
{
    Node *s = (Node *)malloc(sizeof(Node));
    if (!q)
    {
        fprintf(stderr, "OVERFLOW\n");
        exit(EXIT_FAILURE);
    }
    s->data = x;
    s->next = NULL;
    q->r->next = s; // 原来队尾的 next 指向新的元素
    q->r = s;       // 将新元素变为队尾
}
/* 队头元素出队 */
int DeQ(LQ *q, char *x)
{
    Node *p;
    if (q->f == q->r)
        return 0;
    p = q->f->next; // p指向队头元素
    *x = p->data;
    q->f->next = p->next; // 头结点的后继指向队头的下一个元素
    if (q->r == p)
        q->r = q->f; // 队尾直接指向头结点将其出队
    free(p);
    return 1;
}
/* 遍历 */
void vist(LQ *q)
{
    Node *p;
    p = q->f->next;
    while (p)
    {
        printf("%d ", p->data);
        p = p->next;
    }
    printf("\n");
}


数据结构任务2
1.
/**
 * 子任务名：线性表去重
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/9/16
 */
/* 去重 */
void removeRepetiton(LinkList h)
{
    if (NULL == h)
        fprintf(stderr, "Failed\n");
    else
    {
        Node *p = h->next;
        while (h)
        {
            p = h->next;
            while (p)
            {
                if (h->data == p->data)
                {
                    h->next = p->next;
                }
                p = p->next;
            }
            h = h->next;
        }
    }
}
 2.
/**
 * 子任务名：从单链表A中删除自第i个元素起的共len个元素，然后将单链表A插入到单链表B的第j个元素之前
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/9/16
 */
int lenList(LinkList h)
{
    if (NULL == h || NULL == h->next)
        return 0;
    int lengh = 0;
    while (h->next)
    {
        h = h->next;
        lengh++;
    }
    return lengh;
}

void DelList(LinkList h, int position, int len)
{
    if (position > lenList(h) || position < 1 || len > lenList(h) || len < 0 || NULL == h)
        fprintf(stderr, "Failed\n");
    else
    {
        while (--position)
            h = h->next;
        Node *p = h;
        for (int i = 0; i < len + 1; i++)
            h = h->next;
        p->next = h;
    }
}

void insertAToB(LinkList ha, LinkList hb, int position)
{
    if (position > lenList(hb) || position < 0 || NULL == ha || NULL == hb)
        fprintf(stderr, "Failed\n");
    else
    {
        while (position-- > 0)
            hb = hb->next;
        Node *p = hb->next;
        hb->next = ha->next;
        while (hb->next)
            hb = hb->next;
        hb->next = p;
    }
}
3.
/**
 * 子任务名：判断链表所有字符是否中心对称
 * 姓名：蔡础隆  班级：5班  学号：2020012271  日期：2021/9/16
 */
void isSymmetric(LinkList h)
{
    if (NULL == h)
        fprintf(stderr, "Failed\n");
    else
    {
        LinkList p = h->next, q = h;
        int len = lenList(h);

        for (int i = 0; i < len / 2; i++)
        {
            for (int j = i; j < len; j++)
                h = h->next;
            if (h->data != p->data)
            {
                printf("isNotSymmetric\n");
                return;
            }
            p = p->next;
            h = q;
        }
        printf("isSymmetric\n");
    }
}


数据结构任务1
1.设运行次数为 i，
根据 while 循环的条件和里面的代码有
 2^(i+1) = 2^((log2 n)-1)
化简得 i = (log2 n) - 2
所以时间复杂度为 T(n) = O(log n)
变量 count 的值为 (log2 n) - 2
2.
int Fibonacci(int k, int m)
{
    int j = 0, sum = 0;
    int *arr = calloc(m + 1, sizeof(int));
    for (int i = 0; i < k; i++)
    {
        if (i < k - 1)
            arr[j++] = 0;
        if (i == k - 1)
            arr[j++] = 1;
    }//k
    for (int n = 0; n < m - k + 1; n++)
    {
        for (int i = j; i > j - k; i--)
        {
            arr[j] += arr[i - 1];
        }//k
        j++;
    }//(m-k+1) * k
    return arr[j - 2];
}
k * (m + 2) - k ^ 2
T(n) = O(n^2)
3.
可以看出函数的算法为二分查找
第一步进行了一次对比可以写成 f(n) = 1 + f(n/ 2)；
然后将brr[n]一分为二，根据有序数组的特性，通过比较 m 与标的元素的大小，知道了x落入其中一个子数组brr[n/2]；重复以上步骤，可以得到
f(n) =  1 + f(n / 2)
     =  1 + （1 + f(n / 4)）
     =  2 + f(n / 4)
f(n) = k + f(n / (2^k))
如果以上步骤重复了k次之后，数组只余一个元素无法再分，计算结束。此时
f(N) = k + f(1) = k + 1
N / (2^k) = 1
于是
n = 2^k
k = log2(N)
T(n) = O(log n)
